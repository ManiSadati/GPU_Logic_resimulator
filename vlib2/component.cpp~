#include<bits/stdc++.h>

using namespace std;



string erase_extra_space(string line){
  int n = line.size();
  string s = "";
  int cnt = 0;
  while(line[cnt] == ' '){
    cnt++;
  }
  for(int i = cnt; i < n; i++){
    if(line[i] == '(' || line[i] == ')' || line[i] == ',' || line[i] == '.' || line[i] == ';' || line[i] == ':' || line[i] == ']' || line[i] == '[')
      line[i] = ' ';
    if(i>cnt && line[i] == ' ' && line[i-1] == ' ')
      continue;
    if(line[i] == '{' || line[i] == '}' || line[i] == '~' || line[i] == '[')
      s += " ";
    s += line[i];
    if(line[i] == '{' || line[i] == '}' || line[i] == '~' || line[i] == ']')
      s += " ";
  }
  return s;
}


string erase_extra_space1(string line){
  int n = line.size();
  string s = "";
  int cnt = 0;
  while(line[cnt] == ' '){
    cnt++;
  }
  for(int i = cnt; i < n; i++){
    if(line[i] == '(' || line[i] == ')' || line[i] == ',' || line[i] == '.' || line[i] == ';' )
      line[i] = ' ';
    if(i>cnt && line[i] == ' ' && line[i-1] == ' ')
      continue;
    if(line[i] == '{' || line[i] == '}' || line[i] == '~' || line[i] == '[')
      s += " ";
    s += line[i];
    if(line[i] == '{' || line[i] == '}' || line[i] == '~' || line[i] == ']')
      s += " ";
  }
  return s;
}

vector<string> get_all_word(string s){
  vector<string> v;
  string t;
  int cnt = 0 ;
  while(cnt < s.size()){
    if(s[cnt] != ' ' && s[cnt] != ';')
      t += s[cnt];
    else{
      if(t.size())
	v.push_back(t);
      t = "";
    }
    cnt++;
  }
  if(t.size())
    v.push_back(t);
  return v;
}


int to_int(string s){
  int ans=0;
  for(int i=0;i<s.size()-1;i++){
    int x=(int)(s[i])-(int)'0';
    ans+=x;
    ans*=10;
  }
  int x=(int)s[s.size()-1]-(int)'0';
  ans+=x;
  return ans;
}


string replace(string s1,string s2,string s){//replace s1 and s2 in string s
  int pos=s.find(s1);
  if(pos==-1)
    return s;
  return s.substr(0,pos)+s2+s.substr(pos+s1.size());
}

string swap(string s1,string s2,string s){
  s = replace(s1,s2,s);
  //cout<<s<<endl;
  s = replace(s2,s1,s);
  return s;
}


vector<string> inp;
vector<string> out;
vector<string> reg;
vector<string> wir;
vector<string> func;
vector<pair<string,int> > sig;
string module;

void makec(){

}

string process_assign(string s){//adadash motenazer nabashan ok kar nemikone
  string t1="";
  string t2="";
  for(int i=0;i<s.size();i++)
    if(s[i] == '='){
      t1=s.substr(0,i);
      t2=s.substr(i+1);
    }
  t2=replace(";","",t2);
  //cout<<t1<<"â€Œ "<<t2<<endl;
  vector<string> c1=get_all_word(erase_extra_space1(t1));
  vector<string> c2=get_all_word(erase_extra_space1(t2));
  string name1=c1[0];
  string name2=c2[0];
  int sz1=c1.size()-1;
  int sz2=c2.size()-1;
  int rsz1=0;
  int rsz2=0;
  for(int i=0;i<sig.size();i++){
    if(sig[i].first==name1)
      rsz1=sig[i].second;
    if(sig[i].first==name2)
      rsz2=sig[i].second;
  }
  int l,r;
  bool flag=false;
  for(int i=0;i<c1.size();i++){
    if(c1[i][0]=='[' && '0'<=c1[i][1] && c1[i][1]<='9'){
      t1=replace(c1[i],"[i]",t1);
      vector<string> v1=get_all_word(erase_extra_space(c1[i]));
      l=to_int(v1[0]);
      r=to_int(v1[1]);
      flag=true;
    }
    else if(c1[i][0]=='['){
      vector<string> v1=get_all_word(erase_extra_space(c1[i]));
      int x=0;
      for(int i=0;i<sig.size();i++)
	if(sig[i].first==v1[0])
	  x=sig[i].second;
      if(x>0)
	t1=replace("["+v1[0]+"]","[num("+v1[0]+",sizeof("+v1[0]+"))]",t1);
      flag=true;
    }
  }
  for(int i=0;i<c2.size();i++){
    if(c2[i][0]=='[' && '0'<=c2[i][1] && c2[i][1]<='9'){
      t2=replace(c2[i],"[i]",t2);
      vector<string> v1=get_all_word(erase_extra_space(c2[i]));
      l=to_int(v1[0]);
      r=to_int(v1[1]);
    }
    else if(c2[i][0]=='['){
      vector<string> v1=get_all_word(erase_extra_space(c2[i]));
      int x=0;
      for(int i=0;i<sig.size();i++)
	if(sig[i].first==v1[0])
	  x=sig[i].second;
      if(x>0)
	t2=replace("["+v1[0]+"]","[num("+v1[0]+",sizeof("+v1[0]+"))]",t2);
    }
  }
  if(rsz1>sz1){
    return "for(int i=0;i<sizeof("+t2+");i++)\n"+
      t1+"[i]"+" = "+t2+"[i]"+";";
  }
  else if(flag){
    return "for(int i="+to_string(min(l,r))+";i<"+to_string(max(l,r))+";i++)\n"+
      t1+" = "+t2+";";
  }
  else
    return s;
}


string pars(){//vector<string> lines){
  for(int k=0;k<100;k++){
    string line;
    getline(cin,line);
    vector<string> com=get_all_word(erase_extra_space(line));
    //for(int i=0;i<com.size();i++)
    // cout<<com[i]<<endl;
    string t=line;
    if(com[0]=="input" || com[0]=="wire" || com[0]=="reg" || com[0]=="output"){
      //cout<<com[1]<<endl;
      if(com[0]=="input")
	t = replace("input","VAL",t);
      if(com[0]=="output")
	t = replace("output","VAL",t);
      if(com[0]=="wire")
	t = replace("wire","VAL",t);
      if(com[0]=="reg")
	t = replace("reg","VAL",t);
      if('0'<=com[1][0] && com[1][0]<='9'){
	int l=to_int(com[1]);
	int r=to_int(com[2]);
	t = replace("["+com[1]+":"+com[2]+"]","["+to_string(max(l,r))+"]",t);
	t = swap(com[3],"["+to_string(max(l,r))+"]",t);
	//cout<<t<<endl;
	
	if(com.size()==6){
	  int l1=to_int(com[4]);
	  int r1=to_int(com[5]);
	  t = replace("["+com[4]+":"+com[5]+"]","["+to_string(max(l1,r1))+"]",t);
	  t = swap("["+to_string(max(l1,r1))+"]","["+to_string(max(l,r))+"]",t);
	  sig.push_back(make_pair(com[3],2));
	}
	else{
	  sig.push_back(make_pair(com[3],1));

	}
	//cout<<t<<endl;
      if(com[0]=="input")
	inp.push_back(t);
      if(com[0]=="output")
	out.push_back(t);
      if(com[0]=="wire")
	wir.push_back(t);
      if(com[0]=="reg")
	reg.push_back(t);
      }
    }
    else if(com[0]=="if"){
      t=replace("begin","{",t);
      t=replace("1'b1","1",t);//1'b1 1
      for(int i=0;i<t.size();i++)
	if(t[i]=='~')
	  t[i]='!';
      func.push_back(t);
    }
    else if(com[0]=="always"){
      t=replace("@","",t);
      t=replace("or","||",t);
      t=replace("and","&&",t);
      t=replace("always","if",t);
      t=replace("begin","{",t);
      for(int i=0;i<com.size();i++){
	if(com[i]=="posedge")
	  t=replace("posedge","P ==",t);
	if(com[i]=="negedge")
	  t=replace("negedge","N ==",t);
      }
      func.push_back(t);
    }
    else if(com[0]=="endmodule"){
      makec();
    }
    else if(com[0]=="module"){
      module=com[1];
    }
    else{
      t = replace("<=","=",t);
      t = replace("assign","",t);
      bool flag=false;
      for(int i=0;i<t.size();i++){
	if(t[i]=='=')
	  flag=true;
      }
      if(flag){
	t=process_assign(t);
      }
      func.push_back(t);
    }
    cout<<t<<endl;
  }
}

int main(){
  //cout<<swap("a","[8:0]","input [8:0] a;")<<endl;
  //int x=1232;
  //cout<<to_string(x)<<endl;
  //vector<string> p;
  //p.ush_back();
  pars();
}
//  always @( posedge clk or negedge s or posedge q) begin
